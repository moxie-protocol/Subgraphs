type Order @entity {
  id: ID!
  auctionId: BigInt!
  sellAmount: BigInt!
  buyAmount: BigInt! # uint256
  userId: BigInt! # uint96
  userAddress: Bytes!
  price: BigDecimal! # need to understand
  volume: BigDecimal! # need to understand
  timestamp: BigInt!
  txId: Bytes!
  auction: AuctionDetail!
  status: Status
}

enum Status {
  Placed
  Claimed
  Cancelled
}

type User @entity {
  id: ID!
  address: Bytes!
  orders: [Order!]!
}

type AuctionDetail @entity {
  txHash: Bytes!
  id: ID!
  auctionId: BigInt!
  exactOrder: Order! # need to understand
  chainId: String! # not needed
  orders: [Order!]
  highestBid: Order
  lowestBid: Order
  ordersWithoutClaimed: [Order!] # need to understand
  symbolAuctioningToken: String!
  symbolBiddingToken: String!
  addressAuctioningToken: Bytes!
  addressBiddingToken: Bytes!
  decimalsAuctioningToken: BigInt!
  decimalsBiddingToken: BigInt!
  endTimeTimestamp: BigInt!
  orderCancellationEndDate: BigInt!
  startingTimeStamp: BigInt!
  minimumBiddingAmountPerOrder: BigInt!
  minFundingThreshold: BigInt!
  allowListManager: Bytes!
  allowListSigner: Bytes!
  currentVolume: BigDecimal!
  currentClearingOrderSellAmount: BigInt!
  currentClearingOrderBuyAmount: BigInt!
  currentClearingPrice: BigDecimal!
  currentBiddingAmount: BigInt!
  isAtomicClosureAllowed: Boolean!
  isPrivateAuction: Boolean!
  interestScore: BigDecimal! # need to understand
  uniqueBidders: BigInt
}
