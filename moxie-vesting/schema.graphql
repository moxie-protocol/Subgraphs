type TokenDestination @entity {
  "The address of the token destination"
  id: ID!
  tokenDestinationAllowed: Boolean!
  "The manager address"
  manager: TokenLockManager!

  createdAtBlockNumber: BigInt!
  "The block number of the last update"
  blockNumberUpdated: BigInt!
}

type SubjectTokenDestination @entity {
  "The address of the token destination"
  id: ID!
  subjectTokenDestinationAllowed: Boolean!
  "The manager address"
  manager: TokenLockManager!

  createdAtBlockNumber: BigInt!
  "The block number of the last update"
  blockNumberUpdated: BigInt!
}
"""
The Token manager data
"""
type TokenLockManager @entity {
  "Token manager address"
  id: ID!
  "Master copy address"
  masterCopy: Bytes!
  "Tokens stored in manger through deposit or withdraw"
  tokens: BigInt!
  "List of addresses that are allowed to pull funds"
  tokenDestinations: [Bytes!]
  "List of subject addresses that are allowed to pull funds"
  subjectTokenDestinations: [Bytes!]
  "List of addresses that are allowed to pull funds"
  tokenDestinationsEntity: [TokenDestination!]! @derivedFrom(field: "manager")
  "List of subject addresses that are allowed to pull funds"
  subjectTokenDestinationsEntity: [SubjectTokenDestination!]! @derivedFrom(field: "manager")
  
  lastSubjectTokenDestinationApprovalBlockNumber: BigInt!

  lastTokenDestinationApprovalBlockNumber: BigInt!
  "List of function call authorizations"
  authorizedFunctions: [AuthorizedFunction!] @derivedFrom(field: "manager")
  "Token lock count of contracts created"
  tokenLockCount: BigInt!
  "moxie pass token"
  moxiePassToken: Bytes
  "token manager address"
  tokenManager: Bytes
}

"""
Authorized functions for the Manager
"""
type AuthorizedFunction @entity {
  "Primary key = function signature + manager address"
  id: ID!
  "Function signature (string)"
  sig: String!
  "The contract address that is authorized to have this function called on itself"
  target: Bytes!
  "Hash of the function signature"
  sigHash: Bytes!
  "Token lock Manager"
  manager: TokenLockManager!
}
"""
Token Lock Wallets which hold locked MOXIE
"""
type TokenLockWallet @entity {
  "The address of the token lock wallet"
  id: ID!
  "The Manager address"
  manager: TokenLockManager!
  "The hash of the initializer"
  initHash: Bytes!
  "Address of the beneficiary of locked tokens"
  beneficiary: Bytes!
  "The token being used (MOXIE)"
  token: Bytes
  "Amount of tokens to be managed by the lock contract"
  managedAmount: BigInt!
  "balance of the wallet (MOXIE)"
  balance: BigInt!
  "Start time of the release schedule"
  startTime: BigInt!
  "End time of the release schedule"
  endTime: BigInt!
  "Number of periods between start time and end time"
  periods: BigInt!
  "Time when the releases start"
  releaseStartTime: BigInt!
  "Time the cliff vests, 0 if no cliff"
  vestingCliffTime: BigInt!
  "Whether or not the contract is revocable"
  revocable: Revocability
  "True if the beneficiary has approved addresses that the manager has approved"
  tokenDestinationsApproved: Boolean!
  "block number of the last approval"
  tokenDestinationApprovalBlockNumber: BigInt!
  "The amount of tokens that have been resleased"
  tokensReleased: BigInt!
  "The amount of tokens that have been withdrawn"
  tokensWithdrawn: BigInt!
  "The amount of tokens that have been revoked"
  tokensRevoked: BigInt!
  "The block this wlalet was created"
  blockNumberCreated: BigInt!
  "The creation tx hash of the wallet"
  txHash: Bytes!
  "lock"
  lockAccepted: Boolean!
  subjectTokens: [SubjectToken!]! @derivedFrom(field: "vestingContractAddress")
}

type SubjectToken @entity {
  "Vesting contractAddress - The address of the token"
  id: ID!
  "Is this subject token approved"
  tokenDestinationsApproved: Boolean!
  "The Lock Wallet address"
  vestingContractAddress: TokenLockWallet!
  "subject token address"
  subjectToken: Bytes!
  "last updated block number"
  blockNumberUpdated: BigInt!
}

"""
TokenLockWallet Revocability Enum
"""
enum Revocability {
  NotSet
  Enabled
  Disabled
}

type Summary @entity {
  "hardcoded id: SUMMARY"
  id: ID!
  totalLockedBalance: BigInt!
}
